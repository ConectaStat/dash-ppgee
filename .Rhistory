geom_bar()
ms.disciplinas
ms.disciplinas <- ms |>
ggplot(aes(x = quali.disciplinas, y = after_stat(prop), group =1)) +
geom_bar() +
scale_x_discrete(limits = as.character(1:5))
ms.disciplinas
ms.disciplinas <- ms |>
ggplot(aes(x = quali.disciplinas, y = after_stat(prop), group =1)) +
geom_bar() +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Péssimo e 5 = Excelente)",
y = "Proporção de respostas",
title = "Avaliação das disciplinas ofertadas"
)
theme_bw()
ms.disciplinas <- ms |>
ggplot(aes(x = quali.disciplinas, y = after_stat(prop), group =1)) +
geom_bar() +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Péssimo e 5 = Excelente)",
y = "Proporção de respostas",
title = "Avaliação das disciplinas ofertadas"
) +
theme_bw()
ms.disciplinas
ms.orientador <- ms |>
ggplot(aes(x = avalia.orientador, y = after_stat(prop), group =1)) +
geom_bar() +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Péssimo e 5 = Excelente)",
y = "Proporção de respostas",
title = "Avaliação da relação com o orientador"
) +
theme_bw()
ms.orientador
ms.resultado <- ms |>
ggplot(aes(x = avalia.resultado, y = after_stat(prop), group =1)) +
geom_bar() +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Péssimo e 5 = Excelente)",
y = "Proporção de respostas",
title = "Avaliação da satisfação com o resultado do trabalho desenvolvido"
) +
theme_bw()
ms.resultado
ms.recomenda <- ms |>
ggplot(aes(x = recomenda, y = after_stat(prop), group =1)) +
geom_bar() +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Discordo totalmente e 5 = Concordo totalmente)",
y = "Proporção de respostas",
title = "Eu recomendo o PPGEE/UFLA"
) +
theme_bw()
ms.recomenda
install.packages("treemapify")
library(tidyverse)
library(googlesheets4)
library(janitor)
library(treemapify)
dados_linha <- dados %>%
count(linha)
dados_atuacao <- dados %>%
count(atuacao.hoje)
ggplot(dados_linha, aes(area = n, fill = linha, label = linha)) +
geom_treemap() +
geom_treemap_text(fontface = "bold", colour = "white", place = "centre", grow = TRUE) +
labs(title = "Linhas de pesquisa dos egressos") +
theme_minimal()
ggplot(dados_atuacao, aes(area = n, fill = atuacao.hoje, label = atuacao.hoje)) +
geom_treemap() +
geom_treemap_text(fontface = "bold", colour = "white", place = "centre", grow = FALSE) +
labs(title = "Área de atuação atual dos egressos") +
theme_minimal()
table(dados$atuacao.hoje)
dados <- dados |>
mutate(atuacao.hoje = fct_recode(atuacao.hoje,
"Doutorando" = "Aluno de doutorado",
"Doutorando" = "Aluno de pós-graduação",
"Doutorando" = "Doutorado em estatística e experimentação agropecuária",
"Doutorando" = "DOUTORANDO",
"Doutorando" = "Estudante de doutorado",
"Doutorando" = "Estudante no doutorado.")
dados <- dados |>
dados <- dados |>
mutate(atuacao.hoje = fct_recode(atuacao.hoje,
"Doutorando" = "Aluno de doutorado",
"Doutorando" = "Aluno de pós-graduação",
"Doutorando" = "Doutorado em estatística e experimentação agropecuária",
"Doutorando" = "DOUTORANDO",
"Doutorando" = "Estudante de doutorado",
"Doutorando" = "Estudante no doutorado."))
tabela(dados$atuacao.hoje)
table(dados$atuacao.hoje)
dados <- dados |>
mutate(atuacao.hoje = fct_recode(atuacao.hoje,
"Doutorando" = "Aluno de doutorado",
"Doutorando" = "Aluno de pós-graduação",
"Doutorando" = "Doutorado em estatística e experimentação agropecuária",
"Doutorando" = "DOUTORANDO",
"Doutorando" = "Estudante de doutorado",
"Doutorando" = "Estudante no doutorado.",
"Pesquisador" = "Bolsista DCID-2 do Consórcio Pesquisa Café na EPAMIG"))
library(tidyverse)
library(googlesheets4)
library(janitor)
library(treemapify)
gs4_deauth()
dados <- read_sheet("https://docs.google.com/spreadsheets/d/1Z31Mvvl-qqRWmoIxrWW0i_a3fExBqL3PVSmZM32fPMQ/edit?usp=sharing")
dados <- dados |>
select(-`Carimbo de data/hora`) |>
clean_names() |>
rename(
residencia = local_de_residencia_atual_ex_lavras_mg,
nivel = qual_nivel_do_programa_foi_cursado,
conclusao = em_qual_ano_voce_concluiu_seu_ultimo_nivel_no_ppgee,
linha = qual_a_linha_de_pesquisa_que_voce_atuou,
quali.disciplinas = como_voce_avalia_a_qualidade_do_programa_em_relacao_as_disciplinas_ofertadas,
recomenda = sobre_a_afirmacao_eu_recomendaria_o_ppgee_ufla_para_outras_pessoas,
contato.prof = voce_mantem_contato_com_seus_ex_professores_do_programa,
contato.colegas = voce_mantem_contato_com_ex_colegas_do_programa,
sexo = qual_seu_sexo,
avalia.orientador = como_voce_avalia_o_programa_em_relacao_ao_seu_contato_com_seu_orientador,
avalia.resultado = como_voce_avalia_o_programa_em_relacao_a_sua_satisfacao_com_o_resultado_da_sua_tese_dissertacao_desenvolvida,
formacao.ligada = sobre_a_afirmacao_a_formacao_obtida_no_ppgee_esta_diretamente_ligada_ao_meu_trabalho_profissional_hoje,
atuacao.hoje = qual_e_sua_situacao_profissional_atual_predominante_marque_apenas_uma_opcao
) |>
separate(residencia, into = c("municipio", "uf"), sep="[-/,_]")
dados$uf <- str_squish(dados$uf)
dados$nivel <- as.factor(dados$nivel)
dados$linha <- as.factor(dados$linha)
dados$contato.prof <- as.factor(dados$contato.prof)
dados$contato.colegas <- as.factor(dados$contato.colegas)
dados$sexo <- as.factor(dados$sexo)
dados$atuacao.hoje <- as.factor(dados$atuacao.hoje)
dados$quali.disciplinas <- as.factor(dados$quali.disciplinas)
dados$recomenda <- as.factor(dados$recomenda)
dados$avalia.orientador <- as.factor(dados$avalia.orientador)
dados$avalia.resultado <- as.factor(dados$avalia.resultado)
table(dados$atuacao.hoje)
dados <- dados |>
mutate(atuacao.hoje = fct_recode(atuacao.hoje,
"Doutorando" = "Aluno de doutorado",
"Doutorando" = "Aluno de pós-graduação",
"Doutorando" = "Doutorado em estatística e experimentação agropecuária",
"Doutorando" = "DOUTORANDO",
"Doutorando" = "Estudante de doutorado",
"Doutorando" = "Estudante no doutorado.",
"Pesquisador" = "Bolsista DCID-2 do Consórcio Pesquisa Café na EPAMIG",
"Outro" = "Cargo comissionado",
"Outro" = "Consultor",
"Outro" = "Servidor Público"))
table(dados$atuacao.hoje)
View(dados)
levels(uf)
levels(dados$uf)
dados$uf <- as.factor(dados$uf)
levels(dados$uf)
levels(dados$municipio)
View(dados)
View(dados)
library(tidyverse)
library(googlesheets4)
library(janitor)
library(stringi)
library(treemapify)
formacao <- dados |>
ggplot(aes(x = formacao.ligada, y = after_stat(prop), group =1, fill=nivel)) +
geom_bar(position = "dodge") +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Discordo totalmente e 5 = Concordo totalmente)",
y = "Proporção de respostas"
) +
theme_minimal()
formacao
dados$formacao.ligada <- as.factor(dados$formacao.ligada)
formacao <- dados |>
ggplot(aes(x = formacao.ligada, y = after_stat(prop), group =1, fill=nivel)) +
geom_bar(position = "dodge") +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Discordo totalmente e 5 = Concordo totalmente)",
y = "Proporção de respostas"
) +
theme_minimal()
formacao
formacao <- dados |>
ggplot(aes(x = formacao.ligada, y = after_stat(prop), fill=nivel)) +
geom_bar(position = "dodge") +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Discordo totalmente e 5 = Concordo totalmente)",
y = "Proporção de respostas"
) +
theme_minimal()
formacao
formacao <- dados |>
ggplot(aes(x = factor(formacao.ligada), y = after_stat(prop), fill=nivel)) +
geom_bar(position = "dodge") +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Discordo totalmente e 5 = Concordo totalmente)",
y = "Proporção de respostas"
) +
theme_minimal()
formacao
formacao <- dados |>
ggplot(aes(x = factor(formacao.ligada), y = after_stat(prop), fill=nivel)) +
geom_bar(position = "dodge", stat = "count") +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Discordo totalmente e 5 = Concordo totalmente)",
y = "Proporção de respostas"
) +
theme_minimal()
formacao
dados |>
ggplot(aes(x = formacao.ligada, y = after_stat((count)/sum(count)), fill=nivel)) +
geom_bar(position = "dodge") +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Discordo totalmente e 5 = Concordo totalmente)",
y = "Proporção de respostas"
) +
theme_minimal()
dados |>
count(formacao.ligada, nivel) |>
group_by(formacao.ligada) |>
mutate(Sum=sum(n)) |>
mutate(proportion = n/Sum)
formacao <- dados |>
ggplot(aes(x = formacao.ligada, y = proportion, fill=nivel)) +
geom_bar(position = "dodge") +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Discordo totalmente e 5 = Concordo totalmente)",
y = "Proporção de respostas"
) +
theme_minimal()
formacao
gs4_deauth()
dados <- read_sheet("https://docs.google.com/spreadsheets/d/1Z31Mvvl-qqRWmoIxrWW0i_a3fExBqL3PVSmZM32fPMQ/edit?usp=sharing")
dados <- dados |>
select(-`Carimbo de data/hora`) |>
clean_names() |>
rename(
residencia = local_de_residencia_atual_ex_lavras_mg,
nivel = qual_nivel_do_programa_foi_cursado,
conclusao = em_qual_ano_voce_concluiu_seu_ultimo_nivel_no_ppgee,
linha = qual_a_linha_de_pesquisa_que_voce_atuou,
quali.disciplinas = como_voce_avalia_a_qualidade_do_programa_em_relacao_as_disciplinas_ofertadas,
recomenda = sobre_a_afirmacao_eu_recomendaria_o_ppgee_ufla_para_outras_pessoas,
contato.prof = voce_mantem_contato_com_seus_ex_professores_do_programa,
contato.colegas = voce_mantem_contato_com_ex_colegas_do_programa,
sexo = qual_seu_sexo,
avalia.orientador = como_voce_avalia_o_programa_em_relacao_ao_seu_contato_com_seu_orientador,
avalia.resultado = como_voce_avalia_o_programa_em_relacao_a_sua_satisfacao_com_o_resultado_da_sua_tese_dissertacao_desenvolvida,
formacao.ligada = sobre_a_afirmacao_a_formacao_obtida_no_ppgee_esta_diretamente_ligada_ao_meu_trabalho_profissional_hoje,
atuacao.hoje = qual_e_sua_situacao_profissional_atual_predominante_marque_apenas_uma_opcao
) |>
separate(residencia, into = c("municipio", "uf"), sep="[-/,_]")
dados$uf <- str_squish(dados$uf)
dados$nivel <- as.factor(dados$nivel)
dados$linha <- as.factor(dados$linha)
dados$contato.prof <- as.factor(dados$contato.prof)
dados$contato.colegas <- as.factor(dados$contato.colegas)
dados$sexo <- as.factor(dados$sexo)
dados$atuacao.hoje <- as.factor(dados$atuacao.hoje)
dados$quali.disciplinas <- as.factor(dados$quali.disciplinas)
dados$recomenda <- as.factor(dados$recomenda)
dados$avalia.orientador <- as.factor(dados$avalia.orientador)
dados$avalia.resultado <-
as.factor(dados$avalia.resultado)
dados$formacao.ligada <- as.factor(dados$formacao.ligada)
# Municipios e UFs
# Removendo acentos
dados$municipio <- stri_trans_general(dados$municipio,"Latin-ASCII")
#municipios em minusculo
dados$municipio <- str_to_lower(dados$municipio)
dados$municipio <- as.factor(dados$municipio)
dados$uf <- as.factor(dados$uf)
total_respostas <- nrow(dados)
# 1. Percentual de egressos do sexo feminino
pct_feminino <- dados |>
filter(sexo == "Feminino") |>
summarise(pc_fem = n() / total_respostas * 100) |>
pull(pc_fem)
# 2. Percentual de respostas "sim" para contato.prof
pct_contato_prof <- dados |>
filter(contato.prof == "Sim") |>
summarise(pc_prof = n() / total_respostas * 100) |>
pull(pc_prof)
# 3. Percentual de respostas "sim" para formacao.ligada
pct_formacao_ligada <- dados |>
filter(formacao.ligada == "5" | formacao.ligada == "4") |>
summarise(pc_form = n() / total_respostas * 100) |>
pull(pc_form)
# Informações gerais da amostra
total_municipios <- dados |> distinct(municipio) |> nrow()
total_ufs <- dados |> distinct(uf) |> nrow()
ms <- dados |>
filter(nivel == "Mestrado")
do <- dados |>
filter(nivel == "Doutorado")
ms_do <- dados |>
filter(nivel == "Mestrado e Doutorado")
dados.formacao |>
count(formacao.ligada, nivel) |>
group_by(formacao.ligada) |>
mutate(Sum=sum(n)) |>
mutate(proportion = n/Sum)
dados |>
count(formacao.ligada, nivel) |>
group_by(formacao.ligada) |>
mutate(Sum=sum(n)) |>
mutate(proportion = n/Sum)
dados |>
count(formacao.ligada, nivel) |>
group_by(formacao.ligada) |>
mutate(Sum=sum(n)) |>
mutate(proportion = n/Sum) |>
ggplot(aes(x = formacao.ligada, y = proportion, fill=nivel)) +
geom_bar(position = "dodge") +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Discordo totalmente e 5 = Concordo totalmente)",
y = "Proporção de respostas"
) +
theme_minimal()
dados |>
count(formacao.ligada, nivel) |>
group_by(formacao.ligada) |>
mutate(Sum=sum(n)) |>
mutate(proportion = n/Sum) |>
ggplot(aes(x = formacao.ligada, y = proportion, fill=nivel)) +
geom_col(position = "dodge") +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Discordo totalmente e 5 = Concordo totalmente)",
y = "Proporção de respostas"
) +
theme_minimal()
# Calcular proporções
prop.recomenda <- dados |>
group_by(nivel, recomenda) |>
summarise(contagem.rec = n(), .groups = 'drop') |>
group_by(nivel) |>
mutate(proporcao.rec = contagem.rec / sum(contagem.rec))
recomenda <- prop.recomenda |>
ggplot(aes(x = recomenda, y = proporcao.rec, fill = nivel)) +
geom_bar(stat = "identity", position = "dodge") +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Discordo totalmente e 5 = Concordo totalmente)",
y = "Proporção de respostas"
) +
theme_minimal()
recomenda
# Calcular proporções
prop.formacao <- dados |>
group_by(nivel, formacao.ligada) |>
summarise(contagem.for = n(), .groups = 'drop') |>
group_by(nivel) |>
mutate(proporcao.for = contagem.for / sum(contagem.for))
formacao <- prop.formacao |>
ggplot(aes(x = formacao.ligada, y = proporcao.for, fill=nivel)) +
geom_bar(stat = "identity" ,position = "dodge") +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Discordo totalmente e 5 = Concordo totalmente)",
y = "Proporção de respostas"
) +
theme_minimal()
formacao
# Calcular proporções
prop.formacao <- dados |>
group_by(nivel, formacao.ligada) |>
summarise(contagem.for = n(), .groups = 'drop') |>
group_by(nivel) |>
mutate(proporcao.for = contagem.for / sum(contagem.for))
formacao <- prop.formacao |>
ggplot(aes(x = formacao.ligada, y = proporcao.for, fill=nivel)) +
geom_bar(stat = "identity" ,position = "dodge") +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Discordo totalmente e 5 = Concordo totalmente)",
y = "Proporção de respostas"
) +
theme_minimal(legend.position = "bottom")
# Calcular proporções
prop.formacao <- dados |>
group_by(nivel, formacao.ligada) |>
summarise(contagem.for = n(), .groups = 'drop') |>
group_by(nivel) |>
mutate(proporcao.for = contagem.for / sum(contagem.for))
formacao <- prop.formacao |>
ggplot(aes(x = formacao.ligada, y = proporcao.for, fill=nivel)) +
geom_bar(stat = "identity" ,position = "dodge") +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Discordo totalmente e 5 = Concordo totalmente)",
y = "Proporção de respostas"
) +
theme_minimal() +
theme(legend.position = "bottom")
formacao
# Calcular proporções
prop.formacao <- dados |>
group_by(nivel, formacao.ligada) |>
summarise(contagem.for = n(), .groups = 'drop') |>
group_by(nivel) |>
mutate(proporcao.for = contagem.for / sum(contagem.for))
formacao <- prop.formacao |>
ggplot(aes(x = formacao.ligada, y = proporcao.for, fill=nivel)) +
geom_bar(stat = "identity" ,position = "dodge") +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Discordo totalmente e 5 = Concordo totalmente)",
y = "Proporção de respostas",
fill = " "
) +
theme_minimal() +
theme(legend.position = "bottom")
formacao
prop.disci <- dados |>
group_by(nivel, quali.disciplinas) |>
summarise(contagem.dis = n(), .groups = 'drop') |>
group_by(nivel) |>
mutate(proporcao.dis = contagem.dis / sum(contagem.dis))
disciplinas <- prop.disci |>
ggplot(aes(x = quali.disciplinas, y = proporcao.dis, fill=nivel)) +
geom_bar(stat = "identity", position = "dodge") +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Péssimo e 5 = Excelente)",
y = "Proporção de respostas",
fill = " "
) +
theme_minimal() +
theme(legend.position = "bottom")
disciplinas
prop.ori <- dados |>
group_by(nivel, avalia.orientador) |>
summarise(contagem.ori = n(), .groups = 'drop') |>
group_by(nivel) |>
mutate(proporcao.ori = contagem.ori / sum(contagem.ori))
orientador <- prop.ori |>
ggplot(aes(x = avalia.orientador, y = proporcao.ori, fill = nivel)) +
geom_bar(, stat = "identity", position = "dodge") +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Péssimo e 5 = Excelente)",
y = "Proporção de respostas",
fill = " "
) +
theme_minimal() +
theme(legend.position = "bottom")
orientador
library(tidyverse)
library(googlesheets4)
library(janitor)
library(stringi)
library(treemapify)
library(ggthemes)
ggplot(dados_linha, aes(area = n, fill = linha, label = paste0(linha, "\n", round(n / sum(n) * 100, 1), "%")))  +
geom_treemap() +
geom_treemap_text(fontface = "bold", colour = "white", place = "centre", grow = TRUE) +
theme_minimal() +
theme(legend.position = "none") +
scale_color_colorblind()
prop.resul <- dados |>
group_by(nivel, avalia.resultado) |>
summarise(contagem.resul = n(), .groups = 'drop') |>
group_by(nivel) |>
mutate(proporcao.resul = contagem.resul / sum(contagem.resul))
resultado <- prop.resul |>
ggplot(aes(x = avalia.resultado, y = proporcao.resul, fill = nivel)) +
geom_bar(stat = "identity", position = "dodge") +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Péssimo e 5 = Excelente)",
y = "Proporção de respostas",
fill = " "
) +
theme(legend.position = "bottom")+
scale_color_colorblind()
resultado
prop.resul <- dados |>
group_by(nivel, avalia.resultado) |>
summarise(contagem.resul = n(), .groups = 'drop') |>
group_by(nivel) |>
mutate(proporcao.resul = contagem.resul / sum(contagem.resul))
resultado <- prop.resul |>
ggplot(aes(x = avalia.resultado, y = proporcao.resul, fill = nivel)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_colorblind() +
scale_x_discrete(limits = as.character(1:5)) +
labs(
x = "Nota (1 = Péssimo e 5 = Excelente)",
y = "Proporção de respostas",
fill = " "
) +
theme_minimal()+
theme(legend.position = "bottom")
resultado
